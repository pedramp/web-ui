{"version":3,"sources":["client.ts","use-positions.ts","basic-map.tsx","navigation-bar.component.tsx","serviceWorker.ts","i18n.ts","index.tsx","app.component.tsx"],"names":["data","login","passcode","host","stomp","transport","transportEx","station","Client","client","over","Sock","debug","heartbeat","subscription","undefined","subscriptionEx","Promise","resolve","reject","connect","callback","this","subscribe","unsubscribe","disconnect","Positions","state","positions","frame","pos","routingKeyPieces","headers","destination","split","trackerId","length","JSON","parse","body","board","lat","parseFloat","latitude","lng","lon","longitude","direction","dir","speed","getPositionFromFrame","oldDirection","directionDelta","Math","abs","setState","then","children","props","React","Component","DefaultIcon","L","icon","iconUrl","shadowUrl","iconShadow","Marker","prototype","options","center","zoom","BasicMap","Map","id","style","height","zoomControl","viewport","TileLayer","attribution","url","Object","values","map","p","key","title","position","divIcon","className","html","GeoJSON","geodataStations","geodataSegments","NavigationBarComponent","withStyles","theme","appBar","top","bottom","fabButton","zIndex","left","right","margin","toolbar","alignItems","justifyContent","t","useTranslation","classes","AppBar","color","Toolbar","IconButton","aria-label","Fab","Boolean","window","location","hostname","match","resources","en","translation","ro","ru","i18n","use","initReactI18next","init","keySeparator","interpolation","escapeValue","console","log","ReactDOM","render","document","Fragment","CssBaseline","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0fa0cbf9.chunk.js","sourcesContent":["import { over, Subscription } from 'webstomp-client'\nimport Sock from 'sockjs-client'\n\nconst data = {\n  login: 'public_rtec',\n  passcode: 'iWillHackItInVisualBasic',\n  host: 'nazar',\n  stomp: 'https://rtec.dekart.com/webstomp',\n  transport: '/exchange/e_public_rtec_Sho0ohCiephoh2waeM9t/state.transport.*',\n  // There are 2 sources of data, the \"Extended\" one has more trackers and will\n  // keep growing, while the classic one has ~10 and will most likely stay that way\n  transportEx:\n    '/exchange/e_public_rtec_Sho0ohCiephoh2waeM9t/telemetry.transport.*',\n  station: '/exchange/e_public_rtec_Sho0ohCiephoh2waeM9t/state.station.*',\n}\n\nexport class Client {\n  client = over(new Sock(data.stomp), { debug: false, heartbeat: false })\n  subscription?: Subscription = undefined\n  subscriptionEx?: Subscription = undefined\n\n  connect() {\n    return new Promise((resolve, reject) => {\n      this.client!.connect(\n        data.login,\n        data.passcode,\n        resolve,\n        reject,\n        data.host,\n      )\n    })\n  }\n\n  subscribe(callback) {\n    this.subscription = this.client.subscribe(data.transport, callback)\n    this.subscriptionEx = this.client.subscribe(data.transportEx, callback)\n  }\n\n  unsubscribe() {\n    this.subscription!.unsubscribe()\n    this.subscriptionEx!.unsubscribe()\n  }\n\n  disconnect() {\n    this.client.disconnect()\n  }\n}\n","import { default as React } from 'react'\nimport { Client } from './client'\n\nexport class Positions extends React.Component<any> {\n  state = {\n    positions: {},\n  }\n\n  client?: Client = undefined\n\n  componentDidMount() {\n    this.client = new Client()\n    this.client.connect().then(() => {\n      this.client!.subscribe(this.callback)\n    })\n  }\n\n  componentWillUnmount() {\n    this.client!.unsubscribe()\n    this.client!.disconnect()\n  }\n\n  callback = frame => {\n    let pos = getPositionFromFrame(frame)\n\n    // if this vehicle has a previously known state, we perform a\n    // few additional checks, to improve the rendering of the bus-icon orientations\n    if (pos.board in this.state.positions) {\n      const oldDirection = this.state.positions[pos.board].direction\n      const directionDelta = pos.direction - oldDirection\n\n      if (pos.speed === 0) {\n        // Not moving, its direction is often reported as 0, which is probably\n        // not right (unless it moves due North); so we'll keep the previous\n        // value of `direction` instead. If it does go straight North, then\n        // oldDirection will be 0, so we shall render it correctly.\n        pos.direction = oldDirection\n      } else if (pos.speed > 0 && Math.abs(directionDelta) > 30) {\n        // It is moving, but the delta between the current direction and the\n        // old one is above 30 degrees, which is probably too sharp of a turn,\n        // so most likely it is a noisy reading from the GPS tracker. Thus,\n        // we turn it half-way, to make it look smoother.\n        // 30 degrees was chosen empirically.\n        pos.direction -= directionDelta / 2\n      }\n    }\n\n    this.setState({\n      positions: {\n        ...this.state.positions,\n        [pos.board]: pos,\n      },\n    })\n  }\n\n  render() {\n    const children: any = this.props.children\n    return children(this.state.positions)\n  }\n}\n\nfunction getPositionFromFrame(frame) {\n  // Messages are coming from 2 different systems (see note in clients.ts about\n  // routing keys), each system sends a slightly different JSON, the keys are,\n  // old one: dir, lat, lon, board\n  // new one: direction, latitude, longitude ('board' is absent)\n  // To homogenize them, we try both keys, and we extract the ID of the tracker\n  // itself from the routing key header, as a substitude for `board`\n\n  // The routing key looks like `/exchange/e_rtec_mqtt_bridge/telemetry.transport.000001`\n  // or `/exchange/e_rtec_mqtt_bridge/state.transport.013`\n  // The last piece is the ID of the tracker that sent the telemetry\n  let routingKeyPieces = frame.headers.destination.split('.')\n  const trackerId: string = routingKeyPieces[routingKeyPieces.length - 1]\n\n  const data = JSON.parse(frame.body)\n  const board = data.board || trackerId\n  const lat = parseFloat(data.lat || data.latitude)\n  const lng = parseFloat(data.lon || data.longitude)\n  const direction = parseFloat(data.direction || data.dir)\n\n  // NOTE: contrary to what we know so far, that the\n  // direction is a bearing (i.e., North is up at 0,\n  // South is down at 270, etc.), it seems to already\n  // be an angle in a cartesian plane, so the conversion\n  // below is not necessary.\n  // direction = (-direction + 90) % 360\n\n  const speed = data.speed\n  return { board, lat, lng, direction, speed }\n}\n","import React from 'react'\nimport { Map, TileLayer, Viewport, Marker, GeoJSON } from 'react-leaflet'\nimport { divIcon } from 'leaflet'\nimport 'leaflet/dist/leaflet.css'\nimport './style.css'\nimport { Positions } from './use-positions'\n\n// import geodata from './data/route_2_full.json'\nimport geodataSegments from './data/route_2_segments.json'\nimport geodataStations from './data/route_2_stations.json'\n\n// Applying the workaround, otherwise station markers are not rendered\n// https://github.com/Leaflet/Leaflet/issues/4968#issuecomment-264311098\n// This seems to be a known issue, and other workarounds failed, e.g.:\n// https://github.com/PaulLeCam/react-leaflet/issues/453#issuecomment-410450387\nimport L from 'leaflet'\nimport icon from 'leaflet/dist/images/marker-icon.png'\nimport iconShadow from 'leaflet/dist/images/marker-shadow.png'\n\nlet DefaultIcon = L.icon({\n  iconUrl: icon,\n  shadowUrl: iconShadow,\n})\nL.Marker.prototype.options.icon = DefaultIcon\n/////////////////////end of workaround\n\nconst state: Viewport = {\n  center: [47.0229, 28.8353],\n  zoom: 13,\n}\n\nexport function BasicMap() {\n  return (\n    <Map\n      id={'map'}\n      style={{ height: '100vh' }}\n      zoomControl={false}\n      viewport={state}>\n      <TileLayer\n        attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n      />\n      <Positions>\n        {positions =>\n          Object.values(positions).map((p: any) => (\n            <Marker\n              key={p.board}\n              title={p.board}\n              position={p}\n              // To show an oriented marker, we have to work around a limitation\n              // of `react-leaflet`. There is no straightforward way of rotating\n              // the marker, so we overcome this by wrapping it in an invisible\n              // container, and then adding another HTML element inside, which\n              // will use the `arrow` class with a `transform: rotate`.\n              icon={divIcon({\n                className: 'arrow-container',\n                html:\n                  '<div class=\"arrow\" style=\"transform: rotate(' +\n                  p.direction +\n                  'deg)\">',\n              })}\n            />\n          ))\n        }\n      </Positions>\n      <GeoJSON key=\"route-stations\" data={geodataStations as any} />\n\n      <GeoJSON key=\"route-segments\" data={geodataSegments as any} />\n    </Map>\n  )\n}\n","import React from 'react'\nimport AppBar from '@material-ui/core/AppBar'\nimport IconButton from '@material-ui/core/IconButton'\nimport Fab from '@material-ui/core/Fab'\nimport MenuIcon from '@material-ui/icons/Menu'\nimport SearchIcon from '@material-ui/icons/Search'\nimport MoreIcon from '@material-ui/icons/MoreVert'\nimport DirectionsBus from '@material-ui/icons/DirectionsBus'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport { withStyles, StyleRulesCallback } from '@material-ui/core/styles'\nimport { useTranslation } from 'react-i18next'\n\nconst styles: StyleRulesCallback<any, any> = theme => ({\n  appBar: {\n    top: 'auto',\n    bottom: 0,\n  },\n  fabButton: {\n    position: 'absolute',\n    zIndex: 1,\n    top: -30,\n    left: 0,\n    right: 0,\n    margin: '0 auto',\n  },\n  toolbar: {\n    alignItems: 'center',\n    justifyContent: 'space-between',\n  },\n})\n\nfunction NavigationBar(props) {\n  const { t } = useTranslation()\n  const { classes } = props\n\n  return (\n    <AppBar position=\"fixed\" color=\"primary\" className={classes.appBar}>\n      <Toolbar className={classes.toolbar}>\n        <IconButton color=\"inherit\" aria-label=\"Open drawer\">\n          <MenuIcon />\n        </IconButton>\n        <Fab\n          color=\"secondary\"\n          aria-label=\"Add\"\n          className={classes.fabButton}\n          title={t('label.pickRoute')}>\n          <DirectionsBus />\n        </Fab>\n        <div>\n          <IconButton color=\"inherit\">\n            <SearchIcon />\n          </IconButton>\n          <IconButton color=\"inherit\">\n            <MoreIcon />\n          </IconButton>\n        </div>\n      </Toolbar>\n    </AppBar>\n  )\n}\n\nexport const NavigationBarComponent = withStyles(styles)(NavigationBar)\n","/* eslint-disable */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href,\n    )\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n/* eslint-enable */\n","import i18n from 'i18next'\nimport { initReactI18next } from 'react-i18next'\n\nimport en from './l10n/en.json'\nimport ro from './l10n/ro.json'\nimport ru from './l10n/ru.json'\n\nconst resources = {\n  en: { translation: en },\n  ro: { translation: ro },\n  ru: { translation: ru },\n}\n\n/**\n * Infer translation keys\n */\nexport type TranslateKeys = keyof typeof en\n\ni18n.use(initReactI18next).init({\n  resources,\n  /**\n   * Changing language will be added in a future PR\n   */\n  lng: 'en',\n  /**\n   * Use flat keys in l10n files, nested objects not allowed\n   * TypeScript will help with keys inference\n   */\n  keySeparator: false,\n  interpolation: {\n    escapeValue: false, // not needed for react\n  },\n})\n\nexport { i18n }\n","import * as React from 'react'\nimport ReactDOM from 'react-dom'\nimport { I18nextProvider } from 'react-i18next'\nimport './index.css'\nimport { AppComponent } from './app.component'\nimport * as serviceWorker from './serviceWorker'\nimport { i18n } from './i18n'\n\nconsole.log('Starting v0.0.2')\nReactDOM.render(\n  <React.StrictMode>\n    <I18nextProvider i18n={i18n}>\n      <AppComponent />\n    </I18nextProvider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister() // eslint-disable-line\n","import React from 'react'\nimport CssBaseline from '@material-ui/core/CssBaseline'\nimport { BasicMap } from './basic-map'\nimport { NavigationBarComponent } from './navigation-bar.component'\nimport { useTranslation } from 'react-i18next'\n\nexport function AppComponent() {\n  const { t } = useTranslation()\n  document.title = t('label.title')\n  return (\n    <React.Fragment>\n      <CssBaseline />\n      <NavigationBarComponent />\n      <BasicMap />\n    </React.Fragment>\n  )\n}\n"],"sourceRoot":""}